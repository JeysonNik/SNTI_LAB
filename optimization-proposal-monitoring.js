// –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –ê–î–ê–ü–¢–ò–í–ù–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò

class PerformanceMonitor {
  constructor() {
    this.frameRate = 60;
    this.frameTimes = [];
    this.performanceLevel = 'high'; // high, medium, low
    this.metrics = {
      avgFrameTime: 0,
      fps: 60,
      memoryUsage: 0,
      blobCount: 0,
      renderTime: 0
    };
    
    this.thresholds = {
      excellent: 60,
      good: 45,
      poor: 30,
      critical: 15
    };
    
    this.adaptiveSettings = {
      high: {
        recomputeInterval: 16, // 60fps
        maxBlobs: 12,
        morphingEnabled: true,
        filtersEnabled: true,
        shadowsEnabled: true
      },
      medium: {
        recomputeInterval: 33, // 30fps
        maxBlobs: 8,
        morphingEnabled: true,
        filtersEnabled: false,
        shadowsEnabled: false
      },
      low: {
        recomputeInterval: 50, // 20fps
        maxBlobs: 5,
        morphingEnabled: false,
        filtersEnabled: false,
        shadowsEnabled: false
      }
    };
    
    this.init();
  }
  
  init() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
    this.startFPSMonitoring();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (performance.memory) {
      setInterval(() => this.checkMemoryUsage(), 5000);
    }
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
    this.setupSlowFrameDetection();
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    this.startAdaptiveOptimization();
  }
  
  startFPSMonitoring() {
    let lastTime = performance.now();
    
    const measureFrame = (currentTime) => {
      const frameTime = currentTime - lastTime;
      lastTime = currentTime;
      
      this.frameTimes.push(frameTime);
      
      // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Ñ—Ä–µ–π–º–æ–≤
      if (this.frameTimes.length > 60) {
        this.frameTimes.shift();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Ñ—Ä–µ–π–º–æ–≤
      if (this.frameTimes.length % 30 === 0) {
        this.updateMetrics();
      }
      
      requestAnimationFrame(measureFrame);
    };
    
    requestAnimationFrame(measureFrame);
  }
  
  updateMetrics() {
    if (this.frameTimes.length === 0) return;
    
    // –°—Ä–µ–¥–Ω–∏–π FPS
    const avgFrameTime = this.frameTimes.reduce((a, b) => a + b, 0) / this.frameTimes.length;
    this.metrics.avgFrameTime = avgFrameTime;
    this.metrics.fps = Math.round(1000 / avgFrameTime);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.determinePerformanceLevel();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.applyAdaptiveSettings();
  }
  
  determinePerformanceLevel() {
    const fps = this.metrics.fps;
    
    if (fps >= this.thresholds.excellent) {
      this.performanceLevel = 'high';
    } else if (fps >= this.thresholds.good) {
      this.performanceLevel = 'medium';
    } else if (fps >= this.thresholds.poor) {
      this.performanceLevel = 'low';
    } else {
      this.performanceLevel = 'critical';
    }
  }
  
  applyAdaptiveSettings() {
    const settings = this.adaptiveSettings[this.performanceLevel] || this.adaptiveSettings.low;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∫–æ–º–ø—å—é—Ç–∏–Ω–≥–∞
    if (window.recomputeInterval !== settings.recomputeInterval) {
      window.recomputeInterval = settings.recomputeInterval;
      console.log(`üéõÔ∏è Performance mode: ${this.performanceLevel}, interval: ${settings.recomputeInterval}ms`);
    }
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–ª–æ–ø–æ–≤
    if (window.blobs && window.blobs.length > settings.maxBlobs) {
      window.blobs = window.blobs.slice(0, settings.maxBlobs);
    }
    
    // –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥
    window.morphingEnabled = settings.morphingEnabled;
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º CSS —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    this.toggleCSSFeatures(settings);
  }
  
  toggleCSSFeatures(settings) {
    const blobs = document.querySelectorAll('.blob');
    
    blobs.forEach(blob => {
      if (!settings.filtersEnabled) {
        blob.style.filter = 'none';
      }
      
      if (!settings.shadowsEnabled) {
        blob.style.boxShadow = 'none';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (this.performanceLevel === 'low' || this.performanceLevel === 'critical') {
        blob.classList.add('low-performance-mode');
      } else {
        blob.classList.remove('low-performance-mode');
      }
    });
  }
  
  setupSlowFrameDetection() {
    let lastFrameTime = performance.now();
    
    const detectSlowFrame = (currentTime) => {
      const frameTime = currentTime - lastFrameTime;
      lastFrameTime = currentTime;
      
      // –ï—Å–ª–∏ —Ñ—Ä–µ–π–º –∑–∞–Ω—è–ª –±–æ–ª—å—à–µ 33ms (–º–µ–Ω—å—à–µ 30 FPS)
      if (frameTime > 33) {
        this.handleSlowFrame(frameTime);
      }
      
      requestAnimationFrame(detectSlowFrame);
    };
    
    requestAnimationFrame(detectSlowFrame);
  }
  
  handleSlowFrame(frameTime) {
    console.warn(`üêå Slow frame detected: ${frameTime.toFixed(2)}ms`);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    if (frameTime > 100) { // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º
      this.emergencyOptimization();
    }
  }
  
  emergencyOptimization() {
    console.log('üö® Emergency optimization activated');
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    document.body.classList.add('scrolling');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      document.body.classList.remove('scrolling');
    }, 1000);
  }
  
  checkMemoryUsage() {
    if (performance.memory) {
      const memory = performance.memory;
      this.metrics.memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;
      
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –±–æ–ª—å—à–µ 80%
      if (this.metrics.memoryUsage > 0.8) {
        console.warn('üß† High memory usage detected:', Math.round(this.metrics.memoryUsage * 100) + '%');
        this.forceGarbageCollection();
      }
    }
  }
  
  forceGarbageCollection() {
    // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
    if (window.pathCache) {
      const cacheSize = Object.keys(window.pathCache).length;
      if (cacheSize > 100) {
        window.pathCache = {};
        console.log('üóëÔ∏è Path cache cleared');
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –Ω–∞ –±–ª–æ–ø—ã
    if (window.blobs) {
      window.blobs = window.blobs.filter(blob => document.body.contains(blob.element));
    }
  }
  
  startAdaptiveOptimization() {
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    setInterval(() => {
      this.adaptToDeviceCapabilities();
    }, 2000);
  }
  
  adaptToDeviceCapabilities() {
    // –î–µ—Ç–µ–∫—Ü–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (window.innerWidth <= 768) {
      this.optimizeForMobile();
    }
    
    // –î–µ—Ç–µ–∫—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –Ω–∏–∑–∫–∏–º —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º
    if (navigator.getBattery) {
      navigator.getBattery().then(battery => {
        if (battery.level < 0.2) { // –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
          this.activatePowerSaveMode();
        }
      });
    }
    
    // –î–µ—Ç–µ–∫—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (navigator.connection && navigator.connection.effectiveType) {
      const connection = navigator.connection.effectiveType;
      if (connection === 'slow-2g' || connection === '2g') {
        this.activateSlowConnectionMode();
      }
    }
  }
  
  optimizeForMobile() {
    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–ø–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.blobs && window.blobs.length > 6) {
      window.blobs = window.blobs.slice(0, 6);
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    document.body.classList.add('mobile-optimized');
  }
  
  activatePowerSaveMode() {
    console.log('üîã Power save mode activated');
    this.performanceLevel = 'low';
    this.applyAdaptiveSettings();
  }
  
  activateSlowConnectionMode() {
    console.log('üêå Slow connection detected');
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    window.recomputeInterval = 100; // 10 FPS
  }
  
  getPerformanceReport() {
    return {
      ...this.metrics,
      performanceLevel: this.performanceLevel,
      deviceInfo: {
        userAgent: navigator.userAgent,
        memory: navigator.deviceMemory || 'unknown',
        cores: navigator.hardwareConcurrency || 'unknown',
        connection: navigator.connection?.effectiveType || 'unknown'
      }
    };
  }
  
  // –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
  shouldSkipFrame() {
    return this.metrics.fps < this.thresholds.critical;
  }
  
  shouldUseLowQuality() {
    return this.performanceLevel === 'low' || this.performanceLevel === 'critical';
  }
  
  getOptimalFrameInterval() {
    return this.adaptiveSettings[this.performanceLevel]?.recomputeInterval || 50;
  }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
window.performanceMonitor = new PerformanceMonitor();

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const originalRecomputeAndRender = window.recomputeAndRender;
if (originalRecomputeAndRender) {
  window.recomputeAndRender = function() {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–µ–π–º –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è
    if (window.performanceMonitor.shouldSkipFrame()) {
      return;
    }
    
    const startTime = performance.now();
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    originalRecomputeAndRender.call(this);
    
    const renderTime = performance.now() - startTime;
    window.performanceMonitor.metrics.renderTime = renderTime;
    
    // –ï—Å–ª–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (renderTime > 20) {
      window.recomputeInterval = Math.min(window.recomputeInterval + 5, 100);
    }
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
window.getPerformanceReport = () => window.performanceMonitor.getPerformanceReport();

console.log('üéØ Performance monitoring system activated');
console.log('üìä Use getPerformanceReport() to see current metrics');
